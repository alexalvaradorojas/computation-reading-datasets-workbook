# List all CSV files in the folder
csv_files = [f for f in os.listdir(data_path) if f.endswith('.csv')]
print("Available CSV files:")
for file in csv_files:
    print(f"  - {file}")

print("\n" + "="*80 + "\n")

# Load the CSVs into a dictionary
dataframes = {}
for file in csv_files:
    file_path = os.path.join(data_path, file)
    df_name = file.replace('.csv', '')
    dataframes[df_name] = pd.read_csv(file_path)
    
    # Display information about each dataframe
    df = dataframes[df_name]
    print(f"ðŸ“Š {file}")
    print(f"   Shape: {df.shape[0]:,} rows Ã— {df.shape[1]} columns")
    print(f"   Columns: {list(df.columns)}")
    print("\n" + "-"*80 + "\n")

# Summary
print(f"Total datasets loaded: {len(dataframes)}")
print(f"\nAccess dataframes using: dataframes['filename']")
print(f"Example: datasets_df = dataframes['Datasets']")

# Create a main dataframe by consolidating dataset information bewteen 'Datasets' and DatastVersions' to have the most up to date dataset versions 

# Extract the dataframes from the dictionary
datasets_df = dataframes['Datasets'].copy()
datasetVersions_df = dataframes['DatasetVersions'].copy()


# Create a matching column/key between datasets_df and datasetVersions_df by chaing the column name
datasets_df['DatasetId'] = datasets_df['Id']


# Create a dictionary from datasetVersions_df
mapping_dict = {}
for index, row in datasetVersions_df.iterrows():
    mapping_dict[row['DatasetId']] = {
        'Description': row['Description'],
        'Title': row['Title'],
        'Subtitle': row['Subtitle'],
        'LicenseName': row['LicenseName'],
        'VersionNumber': row['VersionNumber']
    }

# Map the values from relevant conlumns in datasetVersions_df to datasets_df
for col in ['Description', 'Title', 'Subtitle', 'LicenseName', 'VersionNumber']:
    datasets_df[col] = datasets_df['DatasetId'].map(lambda x: mapping_dict.get(x, {}).get(col))

# Update the dictionary with the enriched datasets_df
dataframes['Datasets'] = datasets_df

# Display the updated datasets_df
print(f"Dataset shape: {datasets_df.shape[0]:,} rows Ã— {datasets_df.shape[1]} columns")
print(f"\nNew columns added: Description, Title, Subtitle, LicenseName, VersionNumber")
print(f"\nSample of enriched data:")
datasets_df.head()
